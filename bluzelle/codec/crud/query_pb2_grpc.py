# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bluzelle.codec.crud import query_pb2 as crud_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Read = channel.unary_unary(
                '/bluzelle.curium.crud.Query/Read',
                request_serializer=crud_dot_query__pb2.QueryReadRequest.SerializeToString,
                response_deserializer=crud_dot_query__pb2.QueryReadResponse.FromString,
                )
        self.Keys = channel.unary_unary(
                '/bluzelle.curium.crud.Query/Keys',
                request_serializer=crud_dot_query__pb2.QueryKeysRequest.SerializeToString,
                response_deserializer=crud_dot_query__pb2.QueryKeysResponse.FromString,
                )
        self.MyKeys = channel.unary_unary(
                '/bluzelle.curium.crud.Query/MyKeys',
                request_serializer=crud_dot_query__pb2.QueryMyKeysRequest.SerializeToString,
                response_deserializer=crud_dot_query__pb2.QueryMyKeysResponse.FromString,
                )
        self.Count = channel.unary_unary(
                '/bluzelle.curium.crud.Query/Count',
                request_serializer=crud_dot_query__pb2.QueryCountRequest.SerializeToString,
                response_deserializer=crud_dot_query__pb2.QueryCountResponse.FromString,
                )
        self.Has = channel.unary_unary(
                '/bluzelle.curium.crud.Query/Has',
                request_serializer=crud_dot_query__pb2.QueryHasRequest.SerializeToString,
                response_deserializer=crud_dot_query__pb2.QueryHasResponse.FromString,
                )
        self.Search = channel.unary_unary(
                '/bluzelle.curium.crud.Query/Search',
                request_serializer=crud_dot_query__pb2.QuerySearchRequest.SerializeToString,
                response_deserializer=crud_dot_query__pb2.QuerySearchResponse.FromString,
                )
        self.GetNShortestLeases = channel.unary_unary(
                '/bluzelle.curium.crud.Query/GetNShortestLeases',
                request_serializer=crud_dot_query__pb2.QueryGetNShortestLeasesRequest.SerializeToString,
                response_deserializer=crud_dot_query__pb2.QueryGetNShortestLeasesResponse.FromString,
                )
        self.GetLease = channel.unary_unary(
                '/bluzelle.curium.crud.Query/GetLease',
                request_serializer=crud_dot_query__pb2.QueryGetLeaseRequest.SerializeToString,
                response_deserializer=crud_dot_query__pb2.QueryGetLeaseResponse.FromString,
                )
        self.KeyValues = channel.unary_unary(
                '/bluzelle.curium.crud.Query/KeyValues',
                request_serializer=crud_dot_query__pb2.QueryKeyValuesRequest.SerializeToString,
                response_deserializer=crud_dot_query__pb2.QueryKeyValuesResponse.FromString,
                )
        self.File = channel.unary_unary(
                '/bluzelle.curium.crud.Query/File',
                request_serializer=crud_dot_query__pb2.QueryFileRequest.SerializeToString,
                response_deserializer=crud_dot_query__pb2.QueryFileResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def Read(self, request, context):
        """this line is used by starport scaffolding # 2
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Keys(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MyKeys(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Count(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Has(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNShortestLeases(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLease(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KeyValues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def File(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=crud_dot_query__pb2.QueryReadRequest.FromString,
                    response_serializer=crud_dot_query__pb2.QueryReadResponse.SerializeToString,
            ),
            'Keys': grpc.unary_unary_rpc_method_handler(
                    servicer.Keys,
                    request_deserializer=crud_dot_query__pb2.QueryKeysRequest.FromString,
                    response_serializer=crud_dot_query__pb2.QueryKeysResponse.SerializeToString,
            ),
            'MyKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.MyKeys,
                    request_deserializer=crud_dot_query__pb2.QueryMyKeysRequest.FromString,
                    response_serializer=crud_dot_query__pb2.QueryMyKeysResponse.SerializeToString,
            ),
            'Count': grpc.unary_unary_rpc_method_handler(
                    servicer.Count,
                    request_deserializer=crud_dot_query__pb2.QueryCountRequest.FromString,
                    response_serializer=crud_dot_query__pb2.QueryCountResponse.SerializeToString,
            ),
            'Has': grpc.unary_unary_rpc_method_handler(
                    servicer.Has,
                    request_deserializer=crud_dot_query__pb2.QueryHasRequest.FromString,
                    response_serializer=crud_dot_query__pb2.QueryHasResponse.SerializeToString,
            ),
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=crud_dot_query__pb2.QuerySearchRequest.FromString,
                    response_serializer=crud_dot_query__pb2.QuerySearchResponse.SerializeToString,
            ),
            'GetNShortestLeases': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNShortestLeases,
                    request_deserializer=crud_dot_query__pb2.QueryGetNShortestLeasesRequest.FromString,
                    response_serializer=crud_dot_query__pb2.QueryGetNShortestLeasesResponse.SerializeToString,
            ),
            'GetLease': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLease,
                    request_deserializer=crud_dot_query__pb2.QueryGetLeaseRequest.FromString,
                    response_serializer=crud_dot_query__pb2.QueryGetLeaseResponse.SerializeToString,
            ),
            'KeyValues': grpc.unary_unary_rpc_method_handler(
                    servicer.KeyValues,
                    request_deserializer=crud_dot_query__pb2.QueryKeyValuesRequest.FromString,
                    response_serializer=crud_dot_query__pb2.QueryKeyValuesResponse.SerializeToString,
            ),
            'File': grpc.unary_unary_rpc_method_handler(
                    servicer.File,
                    request_deserializer=crud_dot_query__pb2.QueryFileRequest.FromString,
                    response_serializer=crud_dot_query__pb2.QueryFileResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bluzelle.curium.crud.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bluzelle.curium.crud.Query/Read',
            crud_dot_query__pb2.QueryReadRequest.SerializeToString,
            crud_dot_query__pb2.QueryReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Keys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bluzelle.curium.crud.Query/Keys',
            crud_dot_query__pb2.QueryKeysRequest.SerializeToString,
            crud_dot_query__pb2.QueryKeysResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MyKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bluzelle.curium.crud.Query/MyKeys',
            crud_dot_query__pb2.QueryMyKeysRequest.SerializeToString,
            crud_dot_query__pb2.QueryMyKeysResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Count(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bluzelle.curium.crud.Query/Count',
            crud_dot_query__pb2.QueryCountRequest.SerializeToString,
            crud_dot_query__pb2.QueryCountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Has(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bluzelle.curium.crud.Query/Has',
            crud_dot_query__pb2.QueryHasRequest.SerializeToString,
            crud_dot_query__pb2.QueryHasResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bluzelle.curium.crud.Query/Search',
            crud_dot_query__pb2.QuerySearchRequest.SerializeToString,
            crud_dot_query__pb2.QuerySearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNShortestLeases(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bluzelle.curium.crud.Query/GetNShortestLeases',
            crud_dot_query__pb2.QueryGetNShortestLeasesRequest.SerializeToString,
            crud_dot_query__pb2.QueryGetNShortestLeasesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLease(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bluzelle.curium.crud.Query/GetLease',
            crud_dot_query__pb2.QueryGetLeaseRequest.SerializeToString,
            crud_dot_query__pb2.QueryGetLeaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KeyValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bluzelle.curium.crud.Query/KeyValues',
            crud_dot_query__pb2.QueryKeyValuesRequest.SerializeToString,
            crud_dot_query__pb2.QueryKeyValuesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def File(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bluzelle.curium.crud.Query/File',
            crud_dot_query__pb2.QueryFileRequest.SerializeToString,
            crud_dot_query__pb2.QueryFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
