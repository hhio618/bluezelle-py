# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bluzelle.codec.crud import tx_pb2 as crud_dot_tx__pb2


class MsgStub(object):
    """Msg defines the Msg service."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Count = channel.unary_unary(
            "/bluzelle.curium.crud.Msg/Count",
            request_serializer=crud_dot_tx__pb2.MsgCount.SerializeToString,
            response_deserializer=crud_dot_tx__pb2.MsgCountResponse.FromString,
        )
        self.RenewLeasesAll = channel.unary_unary(
            "/bluzelle.curium.crud.Msg/RenewLeasesAll",
            request_serializer=crud_dot_tx__pb2.MsgRenewLeasesAll.SerializeToString,
            response_deserializer=crud_dot_tx__pb2.MsgRenewLeasesAllResponse.FromString,
        )
        self.RenewLease = channel.unary_unary(
            "/bluzelle.curium.crud.Msg/RenewLease",
            request_serializer=crud_dot_tx__pb2.MsgRenewLease.SerializeToString,
            response_deserializer=crud_dot_tx__pb2.MsgRenewLeaseResponse.FromString,
        )
        self.GetNShortestLeases = channel.unary_unary(
            "/bluzelle.curium.crud.Msg/GetNShortestLeases",
            request_serializer=crud_dot_tx__pb2.MsgGetNShortestLeases.SerializeToString,
            response_deserializer=crud_dot_tx__pb2.MsgGetNShortestLeasesResponse.FromString,
        )
        self.Keys = channel.unary_unary(
            "/bluzelle.curium.crud.Msg/Keys",
            request_serializer=crud_dot_tx__pb2.MsgKeys.SerializeToString,
            response_deserializer=crud_dot_tx__pb2.MsgKeysResponse.FromString,
        )
        self.Rename = channel.unary_unary(
            "/bluzelle.curium.crud.Msg/Rename",
            request_serializer=crud_dot_tx__pb2.MsgRename.SerializeToString,
            response_deserializer=crud_dot_tx__pb2.MsgRenameResponse.FromString,
        )
        self.MultiUpdate = channel.unary_unary(
            "/bluzelle.curium.crud.Msg/MultiUpdate",
            request_serializer=crud_dot_tx__pb2.MsgMultiUpdate.SerializeToString,
            response_deserializer=crud_dot_tx__pb2.MsgMultiUpdateResponse.FromString,
        )
        self.DeleteAll = channel.unary_unary(
            "/bluzelle.curium.crud.Msg/DeleteAll",
            request_serializer=crud_dot_tx__pb2.MsgDeleteAll.SerializeToString,
            response_deserializer=crud_dot_tx__pb2.MsgDeleteAllResponse.FromString,
        )
        self.KeyValues = channel.unary_unary(
            "/bluzelle.curium.crud.Msg/KeyValues",
            request_serializer=crud_dot_tx__pb2.MsgKeyValues.SerializeToString,
            response_deserializer=crud_dot_tx__pb2.MsgKeyValuesResponse.FromString,
        )
        self.Has = channel.unary_unary(
            "/bluzelle.curium.crud.Msg/Has",
            request_serializer=crud_dot_tx__pb2.MsgHas.SerializeToString,
            response_deserializer=crud_dot_tx__pb2.MsgHasResponse.FromString,
        )
        self.GetLease = channel.unary_unary(
            "/bluzelle.curium.crud.Msg/GetLease",
            request_serializer=crud_dot_tx__pb2.MsgGetLease.SerializeToString,
            response_deserializer=crud_dot_tx__pb2.MsgGetLeaseResponse.FromString,
        )
        self.Read = channel.unary_unary(
            "/bluzelle.curium.crud.Msg/Read",
            request_serializer=crud_dot_tx__pb2.MsgRead.SerializeToString,
            response_deserializer=crud_dot_tx__pb2.MsgReadResponse.FromString,
        )
        self.Upsert = channel.unary_unary(
            "/bluzelle.curium.crud.Msg/Upsert",
            request_serializer=crud_dot_tx__pb2.MsgUpsert.SerializeToString,
            response_deserializer=crud_dot_tx__pb2.MsgUpsertResponse.FromString,
        )
        self.Create = channel.unary_unary(
            "/bluzelle.curium.crud.Msg/Create",
            request_serializer=crud_dot_tx__pb2.MsgCreate.SerializeToString,
            response_deserializer=crud_dot_tx__pb2.MsgCreateResponse.FromString,
        )
        self.Update = channel.unary_unary(
            "/bluzelle.curium.crud.Msg/Update",
            request_serializer=crud_dot_tx__pb2.MsgUpdate.SerializeToString,
            response_deserializer=crud_dot_tx__pb2.MsgUpdateResponse.FromString,
        )
        self.Delete = channel.unary_unary(
            "/bluzelle.curium.crud.Msg/Delete",
            request_serializer=crud_dot_tx__pb2.MsgDelete.SerializeToString,
            response_deserializer=crud_dot_tx__pb2.MsgDeleteResponse.FromString,
        )


class MsgServicer(object):
    """Msg defines the Msg service."""

    def Count(self, request, context):
        """this line is used by starport scaffolding # proto/tx/rpc."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RenewLeasesAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RenewLease(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNShortestLeases(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Keys(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Rename(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MultiUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def KeyValues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Has(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetLease(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Upsert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Count": grpc.unary_unary_rpc_method_handler(
            servicer.Count,
            request_deserializer=crud_dot_tx__pb2.MsgCount.FromString,
            response_serializer=crud_dot_tx__pb2.MsgCountResponse.SerializeToString,
        ),
        "RenewLeasesAll": grpc.unary_unary_rpc_method_handler(
            servicer.RenewLeasesAll,
            request_deserializer=crud_dot_tx__pb2.MsgRenewLeasesAll.FromString,
            response_serializer=crud_dot_tx__pb2.MsgRenewLeasesAllResponse.SerializeToString,
        ),
        "RenewLease": grpc.unary_unary_rpc_method_handler(
            servicer.RenewLease,
            request_deserializer=crud_dot_tx__pb2.MsgRenewLease.FromString,
            response_serializer=crud_dot_tx__pb2.MsgRenewLeaseResponse.SerializeToString,
        ),
        "GetNShortestLeases": grpc.unary_unary_rpc_method_handler(
            servicer.GetNShortestLeases,
            request_deserializer=crud_dot_tx__pb2.MsgGetNShortestLeases.FromString,
            response_serializer=crud_dot_tx__pb2.MsgGetNShortestLeasesResponse.SerializeToString,
        ),
        "Keys": grpc.unary_unary_rpc_method_handler(
            servicer.Keys,
            request_deserializer=crud_dot_tx__pb2.MsgKeys.FromString,
            response_serializer=crud_dot_tx__pb2.MsgKeysResponse.SerializeToString,
        ),
        "Rename": grpc.unary_unary_rpc_method_handler(
            servicer.Rename,
            request_deserializer=crud_dot_tx__pb2.MsgRename.FromString,
            response_serializer=crud_dot_tx__pb2.MsgRenameResponse.SerializeToString,
        ),
        "MultiUpdate": grpc.unary_unary_rpc_method_handler(
            servicer.MultiUpdate,
            request_deserializer=crud_dot_tx__pb2.MsgMultiUpdate.FromString,
            response_serializer=crud_dot_tx__pb2.MsgMultiUpdateResponse.SerializeToString,
        ),
        "DeleteAll": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteAll,
            request_deserializer=crud_dot_tx__pb2.MsgDeleteAll.FromString,
            response_serializer=crud_dot_tx__pb2.MsgDeleteAllResponse.SerializeToString,
        ),
        "KeyValues": grpc.unary_unary_rpc_method_handler(
            servicer.KeyValues,
            request_deserializer=crud_dot_tx__pb2.MsgKeyValues.FromString,
            response_serializer=crud_dot_tx__pb2.MsgKeyValuesResponse.SerializeToString,
        ),
        "Has": grpc.unary_unary_rpc_method_handler(
            servicer.Has,
            request_deserializer=crud_dot_tx__pb2.MsgHas.FromString,
            response_serializer=crud_dot_tx__pb2.MsgHasResponse.SerializeToString,
        ),
        "GetLease": grpc.unary_unary_rpc_method_handler(
            servicer.GetLease,
            request_deserializer=crud_dot_tx__pb2.MsgGetLease.FromString,
            response_serializer=crud_dot_tx__pb2.MsgGetLeaseResponse.SerializeToString,
        ),
        "Read": grpc.unary_unary_rpc_method_handler(
            servicer.Read,
            request_deserializer=crud_dot_tx__pb2.MsgRead.FromString,
            response_serializer=crud_dot_tx__pb2.MsgReadResponse.SerializeToString,
        ),
        "Upsert": grpc.unary_unary_rpc_method_handler(
            servicer.Upsert,
            request_deserializer=crud_dot_tx__pb2.MsgUpsert.FromString,
            response_serializer=crud_dot_tx__pb2.MsgUpsertResponse.SerializeToString,
        ),
        "Create": grpc.unary_unary_rpc_method_handler(
            servicer.Create,
            request_deserializer=crud_dot_tx__pb2.MsgCreate.FromString,
            response_serializer=crud_dot_tx__pb2.MsgCreateResponse.SerializeToString,
        ),
        "Update": grpc.unary_unary_rpc_method_handler(
            servicer.Update,
            request_deserializer=crud_dot_tx__pb2.MsgUpdate.FromString,
            response_serializer=crud_dot_tx__pb2.MsgUpdateResponse.SerializeToString,
        ),
        "Delete": grpc.unary_unary_rpc_method_handler(
            servicer.Delete,
            request_deserializer=crud_dot_tx__pb2.MsgDelete.FromString,
            response_serializer=crud_dot_tx__pb2.MsgDeleteResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "bluzelle.curium.crud.Msg", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the Msg service."""

    @staticmethod
    def Count(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/bluzelle.curium.crud.Msg/Count",
            crud_dot_tx__pb2.MsgCount.SerializeToString,
            crud_dot_tx__pb2.MsgCountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RenewLeasesAll(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/bluzelle.curium.crud.Msg/RenewLeasesAll",
            crud_dot_tx__pb2.MsgRenewLeasesAll.SerializeToString,
            crud_dot_tx__pb2.MsgRenewLeasesAllResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RenewLease(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/bluzelle.curium.crud.Msg/RenewLease",
            crud_dot_tx__pb2.MsgRenewLease.SerializeToString,
            crud_dot_tx__pb2.MsgRenewLeaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetNShortestLeases(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/bluzelle.curium.crud.Msg/GetNShortestLeases",
            crud_dot_tx__pb2.MsgGetNShortestLeases.SerializeToString,
            crud_dot_tx__pb2.MsgGetNShortestLeasesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Keys(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/bluzelle.curium.crud.Msg/Keys",
            crud_dot_tx__pb2.MsgKeys.SerializeToString,
            crud_dot_tx__pb2.MsgKeysResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Rename(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/bluzelle.curium.crud.Msg/Rename",
            crud_dot_tx__pb2.MsgRename.SerializeToString,
            crud_dot_tx__pb2.MsgRenameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def MultiUpdate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/bluzelle.curium.crud.Msg/MultiUpdate",
            crud_dot_tx__pb2.MsgMultiUpdate.SerializeToString,
            crud_dot_tx__pb2.MsgMultiUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DeleteAll(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/bluzelle.curium.crud.Msg/DeleteAll",
            crud_dot_tx__pb2.MsgDeleteAll.SerializeToString,
            crud_dot_tx__pb2.MsgDeleteAllResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def KeyValues(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/bluzelle.curium.crud.Msg/KeyValues",
            crud_dot_tx__pb2.MsgKeyValues.SerializeToString,
            crud_dot_tx__pb2.MsgKeyValuesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Has(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/bluzelle.curium.crud.Msg/Has",
            crud_dot_tx__pb2.MsgHas.SerializeToString,
            crud_dot_tx__pb2.MsgHasResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetLease(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/bluzelle.curium.crud.Msg/GetLease",
            crud_dot_tx__pb2.MsgGetLease.SerializeToString,
            crud_dot_tx__pb2.MsgGetLeaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Read(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/bluzelle.curium.crud.Msg/Read",
            crud_dot_tx__pb2.MsgRead.SerializeToString,
            crud_dot_tx__pb2.MsgReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Upsert(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/bluzelle.curium.crud.Msg/Upsert",
            crud_dot_tx__pb2.MsgUpsert.SerializeToString,
            crud_dot_tx__pb2.MsgUpsertResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Create(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/bluzelle.curium.crud.Msg/Create",
            crud_dot_tx__pb2.MsgCreate.SerializeToString,
            crud_dot_tx__pb2.MsgCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Update(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/bluzelle.curium.crud.Msg/Update",
            crud_dot_tx__pb2.MsgUpdate.SerializeToString,
            crud_dot_tx__pb2.MsgUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Delete(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/bluzelle.curium.crud.Msg/Delete",
            crud_dot_tx__pb2.MsgDelete.SerializeToString,
            crud_dot_tx__pb2.MsgDeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
